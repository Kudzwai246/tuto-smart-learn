name: Android CI - Auto Detect Modules & Build All APKs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1g"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Print repo root listing and show settings.gradle (if present)
        run: |
          echo "=== Repo root listing ==="
          ls -la
          echo
          if [ -f settings.gradle ]; then
            echo "=== settings.gradle ==="
            cat settings.gradle || true
            echo
          elif [ -f settings.gradle.kts ]; then
            echo "=== settings.gradle.kts ==="
            cat settings.gradle.kts || true
            echo
          else
            echo "No settings.gradle found in repo root."
          fi
        shell: bash

      - name: Make gradlew executable if present
        run: |
          if [ -f "./gradlew" ]; then
            echo "Found gradlew -> making executable"
            chmod +x ./gradlew
          else
            echo "No gradlew in repo root; will use system gradle if needed."
          fi
        shell: bash

      - name: List Gradle projects (to detect module names)
        id: detect
        run: |
          echo "=== Gradle projects output ==="
          if [ -f "./gradlew" ]; then
            ./gradlew projects --no-daemon | sed -n '1,200p' || true
            MODULES=$(./gradlew projects --no-daemon | grep -oP "(?<=Project ':)[^']+" | sort -u | tr '\n' ' ')
          else
            sudo apt-get update
            sudo apt-get install -y gradle
            gradle projects | sed -n '1,200p' || true
            MODULES=$(gradle projects | grep -oP "(?<=Project ':)[^']+" | sort -u | tr '\n' ' ')
          fi
          echo "Detected modules: $MODULES"
          echo "::set-output name=modules::$MODULES"
        shell: bash

      - name: Decode keystore (optional)
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Decoding keystore to ./release.keystore"
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > release.keystore
            ls -l release.keystore
          else
            echo "No KEYSTORE_BASE64 secret provided; skipping keystore decode."
          fi
        shell: bash

      - name: Build detected modules (debug & release)
        run: |
          MODULES="${{ steps.detect.outputs.modules }}"
          echo "Modules variable: '$MODULES'"
          if [ -z "$MODULES" ]; then
            echo "No modules detected â€” attempting to build root project"
            if [ -f "./gradlew" ]; then
              ./gradlew assembleDebug --no-daemon || true
              ./gradlew assembleRelease --no-daemon || true
            else
              sudo apt-get update
              sudo apt-get install -y gradle
              gradle assembleDebug || true
              gradle assembleRelease || true
            fi
          else
            for m in $MODULES; do
              echo "Building module: $m (debug)"
              if [ -f "./gradlew" ]; then
                ./gradlew :$m:assembleDebug --no-daemon || echo "Debug build failed for $m"
              else
                sudo apt-get update
                sudo apt-get install -y gradle
                gradle :$m:assembleDebug || echo "Debug build failed for $m"
              fi
              echo "Building module: $m (release)"
              if [ -f "./gradlew" ]; then
                ./gradlew :$m:assembleRelease --no-daemon || echo "Release build failed for $m"
              else
                sudo apt-get update
                sudo apt-get install -y gradle
                gradle :$m:assembleRelease || echo "Release build failed for $m"
              fi
            done
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Upload build artifacts (any APKs found)
        uses: actions/upload-artifact@v4
        with:
          name: app-apks
          path: |
            **/build/outputs/**/*.apk
