name: Android CI - Capacitor Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
        id: setup-java

      - name: Install npm dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
        shell: bash

      - name: Build web assets
        run: npm run build
        shell: bash

      - name: Setup Capacitor config
        run: |
          echo "Creating capacitor.config.ts..."
          cat > capacitor.config.ts << 'EOF'
          import type { CapacitorConfig } from '@capacitor/cli';

          const config: CapacitorConfig = {
            appId: 'app.lovable.8bc352a7cc3b44b79318b107c46135ad',
            appName: 'tuto-smart-learn',
            webDir: 'dist',
            server: {
              androidScheme: 'https'
            }
          };

          export default config;
          EOF
        shell: bash

      - name: Setup Android SDK components
        run: |
          echo "Installing required Android SDK components..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "emulator"
          echo "Android SDK components installed"
        shell: bash

      - name: Verify Capacitor plugins
        run: |
          echo "=== Verifying Capacitor plugin resolution ==="
          if [ -f "node_modules/@capacitor/android/package.json" ]; then
            echo "✓ Capacitor Android found"
            cat node_modules/@capacitor/android/package.json | grep version
          else
            echo "✗ Capacitor Android missing"
          fi
          
          echo "=== Checking plugin directories ==="
          ls -la node_modules/@capacitor/ || echo "No Capacitor plugins found"
          
          echo "=== Checking android settings.gradle includes ==="
          if [ -f "android/settings.gradle" ]; then
            grep -n "capacitor" android/settings.gradle || echo "No capacitor references found"
          fi
        shell: bash

      - name: Clean and prepare build environment
        run: |
          echo "=== Cleaning build environment ==="
          rm -rf android/app/build android/build .gradle android/.gradle || true
          rm -rf node_modules/.cache || true
          echo "✓ Build cache cleaned"
        shell: bash

      - name: Add android platform & Enhanced Capacitor sync
        run: |
          echo "=== Installing Capacitor CLI ==="
          npm install -g @capacitor/cli
          
          echo "=== Adding Android platform ==="
          npx cap add android --force || echo "Android platform already exists"
          
          echo "=== Building web assets ==="
          npm run build
          
          echo "=== Enhanced Capacitor sync with verification ==="
          npx cap sync android --verbose
          
          echo "=== Post-sync verification ==="
          if [ -f "android/settings.gradle" ]; then
            echo "✓ Android project exists"
            echo "Checking Capacitor references in settings.gradle:"
            grep -n "capacitor" android/settings.gradle || echo "No capacitor references found"
          else
            echo "✗ Android project missing after sync"
            exit 1
          fi
          
          echo "=== Verifying Capacitor plugins in Android project ==="
          if [ -d "android/capacitor-cordova-android-plugins" ]; then
            echo "✓ Capacitor cordova plugins directory exists"
          else
            echo "✗ Capacitor cordova plugins directory missing"
          fi
          
          echo "=== Verifying node_modules Capacitor plugins ==="
          ls -la node_modules/@capacitor/ || echo "No Capacitor plugins in node_modules"
        shell: bash

      - name: Setup Java environment
        run: |
          # Find Java home
          JAVA_HOME_DETECTED=$(dirname $(dirname $(readlink -f $(which java))))
          echo "JAVA_HOME=$JAVA_HOME_DETECTED" >> $GITHUB_ENV
          echo "Detected JAVA_HOME: $JAVA_HOME_DETECTED"
          
          chmod +x android/gradlew
          echo "Java version:"
          java -version
        shell: bash

      - name: Debug Android configuration
        run: |
          echo "=== Android project structure ==="
          ls -la android/
          echo "=== Android app structure ==="
          ls -la android/app/
          echo "=== Gradle wrapper permissions ==="
          ls -la android/gradlew
          echo "=== Gradle wrapper jar size ==="
          ls -la android/gradle/wrapper/gradle-wrapper.jar
          echo "=== Gradle wrapper properties ==="
          cat android/gradle/wrapper/gradle-wrapper.properties
          echo "=== Android SDK components ==="
          ls -la $ANDROID_HOME/ || echo "Android SDK not found"
          echo "=== Available SDK platforms ==="
          ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
          echo "=== Available build tools ==="
          ls -la $ANDROID_HOME/build-tools/ || echo "No build tools found"
          echo "=== Platform tools ==="
          ls -la $ANDROID_HOME/platform-tools/ || echo "No platform tools found"
          echo "=== Command line tools ==="
          ls -la $ANDROID_HOME/cmdline-tools/ || echo "No cmdline tools found"
        shell: bash

      - name: Pre-build validation
        run: |
          cd android
          echo "=== Pre-build validation ==="
          echo "Current directory: $(pwd)"
          echo "Java version:"
          java -version
          echo "Gradle wrapper validation:"
          ls -la gradlew gradle/wrapper/
          echo "Build tools validation:"
          if [ -d "$ANDROID_HOME/build-tools/34.0.0" ]; then
            echo "✓ Build tools 34.0.0 found"
            ls -la $ANDROID_HOME/build-tools/34.0.0/
          else
            echo "✗ Build tools 34.0.0 missing"
          fi
          echo "Platform validation:"
          if [ -d "$ANDROID_HOME/platforms/android-34" ]; then
            echo "✓ Android platform 34 found"
          else
            echo "✗ Android platform 34 missing"
          fi
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash

      - name: Build debug APK
        run: |
          cd android
          echo "=== Starting Android debug build ==="
          
          # Set environment variables for build
          export JAVA_HOME=$JAVA_HOME
          export ANDROID_HOME=$ANDROID_HOME
          export PATH="$JAVA_HOME/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/34.0.0:$PATH"
          
          echo "Environment check:"
          echo "JAVA_HOME: $JAVA_HOME"
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "PATH: $PATH"
          
          echo "Gradle version check:"
          ./gradlew --version --no-daemon
          
          echo "Running Gradle diagnostics..."
          ./gradlew --no-daemon || echo "Gradle diagnostic completed"
          
          echo "Starting clean build..."
          ./gradlew clean --no-daemon --stacktrace
          
          echo "Starting debug assembly..."
          ./gradlew assembleDebug --no-daemon --stacktrace --info
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash

      - name: Build release APK
        run: |
          cd android
          echo "Starting release build..."
          ./gradlew assembleRelease --no-daemon --stacktrace --info --warning-mode all
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash
        continue-on-error: true

      - name: Show build outputs
        run: |
          echo "Looking for APKs..."
          find . -type f -name "*.apk" -print || echo "No APKs found"
          echo "Contents of android/app/build/outputs:"
          ls -la android/app/build/outputs/ || echo "outputs directory not found"
          echo "Contents of android/app/build/outputs/apk:"
          ls -la android/app/build/outputs/apk/ || echo "apk directory not found"
        shell: bash

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tutosmart-apks
          path: |
            android/app/build/outputs/apk/debug/*.apk
            android/app/build/outputs/apk/release/*.apk
          if-no-files-found: warn
          retention-days: 30

      - name: Upload build logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-logs
          path: |
            android/app/build/
          if-no-files-found: ignore
          retention-days: 7