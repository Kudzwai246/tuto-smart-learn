name: Android CI - Capacitor Build

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
        id: setup-java

      - name: Install npm dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
        shell: bash

      - name: Build web assets
        run: npm run build
        shell: bash

      - name: Setup Capacitor config
        run: |
          echo "Creating capacitor.config.ts..."
          cat > capacitor.config.ts << 'EOF'
          import type { CapacitorConfig } from '@capacitor/cli';

          const config: CapacitorConfig = {
            appId: 'app.lovable.8bc352a7cc3b44b79318b107c46135ad',
            appName: 'tuto-smart-learn',
            webDir: 'dist',
            server: {
              androidScheme: 'https'
            }
          };

          export default config;
          EOF
        shell: bash

      - name: Setup Android SDK components
        run: |
          echo "Installing required Android SDK components..."
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-34"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;34.0.0"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platform-tools"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "emulator"
          echo "Android SDK components installed"
        shell: bash

      - name: Verify Capacitor plugins
        run: |
          echo "=== Verifying Capacitor plugin resolution ==="
          if [ -f "node_modules/@capacitor/android/package.json" ]; then
            echo "‚úì Capacitor Android found"
            cat node_modules/@capacitor/android/package.json | grep version
          else
            echo "‚úó Capacitor Android missing"
          fi
          
          echo "=== Checking plugin directories ==="
          ls -la node_modules/@capacitor/ || echo "No Capacitor plugins found"
          
          echo "=== Checking android settings.gradle includes ==="
          if [ -f "android/settings.gradle" ]; then
            grep -n "capacitor" android/settings.gradle || echo "No capacitor references found"
          fi
        shell: bash

      - name: üßπ Radical Workspace Cleanup
        run: |
          echo "=== Performing radical workspace cleanup ==="
          # Clean all Gradle-related directories and caches
          rm -rf ~/.gradle/
          rm -rf ~/.android/
          rm -rf android/.gradle/
          rm -rf android/app/.gradle/
          rm -rf android/app/build/
          rm -rf android/build/
          rm -rf android/capacitor-cordova-android-plugins/.gradle/
          
          # Clean any lock files and temporary directories
          find . -name "*.lock" -type f -delete
          find . -name ".gradle" -type d -exec rm -rf {} + 2>/dev/null || true
          find . -name "build" -type d -path "*/android/*" -exec rm -rf {} + 2>/dev/null || true
          
          # Clean Gradle daemon processes
          pkill -f gradle || true
          
          # Ensure complete isolation
          export GRADLE_USER_HOME="/tmp/gradle-$$"
          mkdir -p "$GRADLE_USER_HOME"
          
          echo "‚úì Radical cleanup completed - fresh environment ready"
        shell: bash

      - name: Add android platform & Enhanced Capacitor sync
        run: |
          echo "=== Installing Capacitor CLI ==="
          npm install -g @capacitor/cli
          
          echo "=== Adding Android platform ==="
          npx cap add android --force || echo "Android platform already exists"
          
          echo "=== Building web assets ==="
          npm run build
          
          echo "=== Enhanced Capacitor sync with verification ==="
          npx cap sync android
          
          echo "=== Post-sync verification ==="
          if [ -f "android/settings.gradle" ]; then
            echo "‚úì Android project exists"
            echo "Checking Capacitor references in settings.gradle:"
            grep -n "capacitor" android/settings.gradle || echo "No capacitor references found"
          else
            echo "‚úó Android project missing after sync"
            exit 1
          fi
          
          echo "=== Verifying Capacitor plugins in Android project ==="
          if [ -d "android/capacitor-cordova-android-plugins" ]; then
            echo "‚úì Capacitor cordova plugins directory exists"
          else
            echo "‚úó Capacitor cordova plugins directory missing"
          fi
          
          echo "=== Verifying node_modules Capacitor plugins ==="
          ls -la node_modules/@capacitor/ || echo "No Capacitor plugins in node_modules"
        shell: bash

      - name: Setup Java environment
        run: |
          # Find Java home
          JAVA_HOME_DETECTED=$(dirname $(dirname $(readlink -f $(which java))))
          echo "JAVA_HOME=$JAVA_HOME_DETECTED" >> $GITHUB_ENV
          echo "Detected JAVA_HOME: $JAVA_HOME_DETECTED"
          
          chmod +x android/gradlew
          echo "Java version:"
          java -version
        shell: bash

      - name: Debug Android configuration
        run: |
          echo "=== Android project structure ==="
          ls -la android/
          echo "=== Android app structure ==="
          ls -la android/app/
          echo "=== Gradle wrapper permissions ==="
          ls -la android/gradlew
          echo "=== Gradle wrapper jar size ==="
          ls -la android/gradle/wrapper/gradle-wrapper.jar
          echo "=== Gradle wrapper properties ==="
          cat android/gradle/wrapper/gradle-wrapper.properties
          echo "=== Android SDK components ==="
          ls -la $ANDROID_HOME/ || echo "Android SDK not found"
          echo "=== Available SDK platforms ==="
          ls -la $ANDROID_HOME/platforms/ || echo "No platforms found"
           echo "=== Available build tools ==="
           ls -la $ANDROID_HOME/build-tools/ || echo "No build tools found"
           echo "=== Checking for specific Build Tools versions ==="
           [ -d "$ANDROID_HOME/build-tools/34.0.0" ] && echo "‚úì Build Tools 34.0.0 found" || echo "‚úó Build Tools 34.0.0 missing"
           [ -d "$ANDROID_HOME/build-tools/30.0.3" ] && echo "‚úì Build Tools 30.0.3 found" || echo "‚úó Build Tools 30.0.3 missing"
           echo "=== Platform tools ==="
          ls -la $ANDROID_HOME/platform-tools/ || echo "No platform tools found"
          echo "=== Command line tools ==="
          ls -la $ANDROID_HOME/cmdline-tools/ || echo "No cmdline tools found"
        shell: bash

      - name: Pre-build validation
        run: |
          cd android
          echo "=== Pre-build validation ==="
          echo "Current directory: $(pwd)"
          echo "Java version:"
          java -version
          echo "Gradle wrapper validation:"
          ls -la gradlew gradle/wrapper/
          echo "Build tools validation:"
          if [ -d "$ANDROID_HOME/build-tools/34.0.0" ]; then
            echo "‚úì Build tools 34.0.0 found"
            ls -la $ANDROID_HOME/build-tools/34.0.0/
          else
            echo "‚úó Build tools 34.0.0 missing"
          fi
          echo "Platform validation:"
          if [ -d "$ANDROID_HOME/platforms/android-34" ]; then
            echo "‚úì Android platform 34 found"
          else
            echo "‚úó Android platform 34 missing"
          fi
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash

      - name: üîç Pre-build Gradle Diagnostics
        run: |
          cd android
          echo "=== Running Gradle diagnostic tasks ==="
          
          chmod +x gradlew
          
          # List all projects
          echo "=== Available Projects ==="
          ./gradlew projects --no-daemon || true
          
          # List all tasks for :app
          echo "=== Tasks available for :app ==="
          ./gradlew :app:tasks --all --no-daemon || true
          
          # Run printConfigs diagnostic task
          echo "=== Configuration diagnostics ==="
          ./gradlew :app:printConfigs --no-daemon || true
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash

      - name: üîß Build Android APK (Debug) - Enhanced Strategy
        run: |
          cd android
          echo "=== Starting Enhanced Debug APK Build ==="
          
          # Set up isolated Gradle environment
          export GRADLE_USER_HOME="/tmp/gradle-build-$$"
          export GRADLE_OPTS="-Xmx2g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8"
          
          # Validate environment
          echo "Build Tools validation:"
          ls -la $ANDROID_HOME/build-tools/ || echo "No build tools found"
          echo "Available Gradle wrapper:"
          ls -la gradlew
          
          # Make gradlew executable
          chmod +x gradlew
          
          # Create logs directory
          mkdir -p /tmp/build-logs
          
          # Primary build attempt with full logging captured
          echo "=== Primary Build Attempt with Full Logging ==="
          timeout 600 ./gradlew clean :app:assembleDebug \
            --stacktrace \
            --info \
            --no-daemon \
            --no-parallel \
            --no-configure-on-demand \
            --no-build-cache \
            --refresh-dependencies \
            -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m" \
            -Pandroid.useAndroidX=true \
            -Pandroid.enableJetifier=true \
            2>&1 | tee /tmp/build-logs/debug-build.log || BUILD_FAILED=true
          
          if [ "$BUILD_FAILED" = "true" ]; then
            echo ""
            echo "=========================================="
            echo "=== BUILD FAILED - Displaying Last 200 Lines ==="
            echo "=========================================="
            tail -n 200 /tmp/build-logs/debug-build.log
            echo ""
            echo "=========================================="
            echo "=== Running Diagnostics ==="
            echo "=========================================="
            ./gradlew :app:tasks --all 2>&1 | tee /tmp/build-logs/tasks.log || true
            ./gradlew :app:dependencies --configuration debugRuntimeClasspath 2>&1 | tee /tmp/build-logs/dependencies.log || true
            echo ""
            echo "Full logs saved to artifacts for review"
            exit 1
          fi
          
          echo "=== Debug APK Build Complete ==="
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "‚úì Debug APK built successfully"
            ls -la app/build/outputs/apk/debug/
          else
            echo "‚úó Debug APK not found after build"
            find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found anywhere"
            exit 1
          fi
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash

      - name: üîß Build Android APK (Release) - Enhanced Strategy
        run: |
          cd android
          echo "=== Starting Enhanced Release APK Build ==="
          
          # Use same isolated environment
          export GRADLE_USER_HOME="/tmp/gradle-build-$$"
          export GRADLE_OPTS="-Xmx2g -XX:MaxMetaspaceSize=512m -Dfile.encoding=UTF-8"
          
          # Release build with full logging captured
          echo "=== Release Build Attempt with Full Logging ==="
          timeout 600 ./gradlew :app:assembleRelease \
            --stacktrace \
            --info \
            --no-daemon \
            --no-parallel \
            --no-build-cache \
            -Dorg.gradle.jvmargs="-Xmx2g -XX:MaxMetaspaceSize=512m" \
            2>&1 | tee /tmp/build-logs/release-build.log || RELEASE_FAILED=true
          
          if [ "$RELEASE_FAILED" = "true" ]; then
            echo ""
            echo "=========================================="
            echo "=== RELEASE BUILD FAILED - Displaying Last 200 Lines ==="
            echo "=========================================="
            tail -n 200 /tmp/build-logs/release-build.log
            echo ""
            echo "Continuing despite release build failure..."
          else
            echo "=== Release APK Build Complete ==="
            if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
              echo "‚úì Release APK built successfully"
              ls -la app/build/outputs/apk/release/
            else
              echo "‚úó Release APK not found despite successful build"
            fi
          fi
        env:
          ANDROID_HOME: /usr/local/lib/android/sdk
        shell: bash
        continue-on-error: true

      - name: üìä Final Build Status & APK Collection
        run: |
          echo "=== Final Build Status Report ==="
          cd android
          
          echo "Checking for built APK files:"
          find app/build/outputs/apk/ -name "*.apk" -type f -exec ls -la {} + 2>/dev/null || echo "No APK files found"
          
          echo "Debug APK status:"
          if [ -f "app/build/outputs/apk/debug/app-debug.apk" ]; then
            echo "‚úì Debug APK: AVAILABLE"
            stat app/build/outputs/apk/debug/app-debug.apk
          else
            echo "‚úó Debug APK: MISSING"
          fi
          
          echo "Release APK status:"
          if [ -f "app/build/outputs/apk/release/app-release-unsigned.apk" ]; then
            echo "‚úì Release APK: AVAILABLE"
            stat app/build/outputs/apk/release/app-release-unsigned.apk
          else
            echo "‚úó Release APK: MISSING"
          fi
        shell: bash

      - name: üì± Upload APK Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tutosmart-apks
          path: |
            android/app/build/outputs/apk/debug/app-debug.apk
            android/app/build/outputs/apk/release/app-release-unsigned.apk
          retention-days: 30

      - name: üìÑ Upload Build Logs and Diagnostics
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs-and-diagnostics
          path: |
            /tmp/build-logs/**/*.log
            android/app/build/reports/
            android/build/reports/
            android/gradle-diagnostic-*.log
            android/capacitor-debug-*.log
          retention-days: 7