name: Android CI - Capacitor (install node_modules, inspect & build)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1g"
      GRADLE_VERSION: "8.2.1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node (for npm install)
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install npm dependencies (npm ci if lockfile present)
        run: |
          if [ -f package-lock.json ]; then
            npm ci --no-audit --no-fund
          else
            npm install --no-audit --no-fund
          fi
        shell: bash

      - name: Run Capacitor sync (generate native Android projects)
        run: |
          echo "Running Capacitor sync..."
          npx cap sync android || npx cap update android || true
        shell: bash

      - name: Node modules / Capacitor plugin folders - diagnostic
        run: |
          echo "=== node_modules/@capacitor listing (if present) ==="
          if [ -d node_modules/@capacitor ]; then
            ls -la node_modules/@capacitor || true
          else
            echo "node_modules/@capacitor not present"
          fi
          echo
          echo "=== Check plugin android dirs and show build.gradle head (if present) ==="
          for P in app haptics keyboard status-bar android '@capacitor'; do
            # try a few patterns
            for DIR in \
              "node_modules/@capacitor/${P}/android" \
              "node_modules/@capacitor/${P}" \
              "node_modules/@capacitor/${P}/android" \
              "node_modules/@capacitor/${P}" \
              "../node_modules/@capacitor/${P}/android" \
              "../node_modules/@capacitor/${P}"; do
              if [ -d "$DIR" ]; then
                echo "FOUND: $DIR"
                if [ -f "$DIR/build.gradle" ]; then
                  echo "---- top of $DIR/build.gradle ----"
                  sed -n '1,200p' "$DIR/build.gradle" || true
                  echo "---- end preview ----"
                else
                  echo "No build.gradle at $DIR"
                fi
              fi
            done
          done
        shell: bash

      - name: Show android/settings.gradle (debug)
        run: |
          echo "=== android/settings.gradle (first 200 lines) ==="
          if [ -f android/settings.gradle ]; then
            sed -n '1,200p' android/settings.gradle || true
          else
            echo "ERROR: android/settings.gradle not found!"
            exit 2
          fi
        shell: bash

      - name: Set up JDK 17
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Make android/gradlew executable if present
        run: |
          if [ -f "./android/gradlew" ]; then
            chmod +x ./android/gradlew
            echo "Using android/gradlew"
            ls -l android/gradlew
          else
            echo "No android/gradlew found; will download Gradle ${GRADLE_VERSION}"
          fi
        shell: bash

      - name: Prepare Gradle (download if wrapper missing)
        id: prepare-gradle
        run: |
          if [ -f "./android/gradlew" ]; then
            echo "GRADLE_CMD=./android/gradlew" >> $GITHUB_OUTPUT
          else
            ZIP=gradle-${GRADLE_VERSION}-bin.zip
            curl -sSLO https://services.gradle.org/distributions/${ZIP}
            unzip -q ${ZIP}
            GR_HOME=$(pwd)/gradle-${GRADLE_VERSION}
            echo "GRADLE_CMD=${GR_HOME}/bin/gradle" >> $GITHUB_OUTPUT
            chmod +x ${GR_HOME}/bin/gradle
          fi
        shell: bash

      - name: Gradle diagnostic: projects and plugin properties
        run: |
          GR_CMD="${{ steps.prepare-gradle.outputs.GRADLE_CMD }}"
          echo "Using gradle command: $GR_CMD"
          # Print overall projects tree
          if [ "$GR_CMD" = "./android/gradlew" ]; then
            cd android
            ./gradlew projects --no-daemon || true
            # Try printing properties for common plugin projects (if present)
            ./gradlew :capacitor-android:properties --no-daemon || true
            ./gradlew :capacitor-app:properties --no-daemon || true
            ./gradlew :capacitor-haptics:properties --no-daemon || true
            ./gradlew :capacitor-keyboard:properties --no-daemon || true
            ./gradlew :capacitor-status-bar:properties --no-daemon || true
            cd ..
          else
            "$GR_CMD" -p android projects --no-daemon || true
            "$GR_CMD" -p android :capacitor-android:properties --no-daemon || true
            "$GR_CMD" -p android :capacitor-app:properties --no-daemon || true
            "$GR_CMD" -p android :capacitor-haptics:properties --no-daemon || true
            "$GR_CMD" -p android :capacitor-keyboard:properties --no-daemon || true
            "$GR_CMD" -p android :capacitor-status-bar:properties --no-daemon || true
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Decode keystore (optional)
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            mkdir -p android
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/release.keystore
            ls -l android/release.keystore || true
          else
            echo "No KEYSTORE_BASE64 secret provided; skipping keystore decode."
          fi
        shell: bash

      - name: Build debug (android/)
        run: |
          set -e
          GR_CMD="${{ steps.prepare-gradle.outputs.GRADLE_CMD }}"
          echo "Using gradle command: $GR_CMD"
          if [ "$GR_CMD" = "./android/gradlew" ]; then
            cd android
            ./gradlew assembleDebug --no-daemon
            cd ..
          else
            "$GR_CMD" -p android assembleDebug --no-daemon
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Build release (android/)
        run: |
          set -e || true
          GR_CMD="${{ steps.prepare-gradle.outputs.GRADLE_CMD }}"
          if [ "$GR_CMD" = "./android/gradlew" ]; then
            cd android
            ./gradlew assembleRelease --no-daemon || true
            cd ..
          else
            "$GR_CMD" -p android assembleRelease --no-daemon || true
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Show built APK locations
        run: |
          echo "=== Searching for APKs ==="
          find . -type f -name "*.apk" -print || echo "No APKs found."
        shell: bash

      - name: Upload build artifacts (any APKs found)
        uses: actions/upload-artifact@v4
        with:
          name: app-apks
          path: |
            **/build/outputs/**/*.apk
