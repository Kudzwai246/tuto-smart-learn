name: Android CI - Build Android Subfolder (download Gradle if no wrapper)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest
    env:
      GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx1g"
      GRADLE_VERSION: "8.2.1"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show repo root and android folder
        run: |
          echo "=== Repo root listing ==="
          ls -la
          echo
          echo "=== android folder listing ==="
          ls -la android || echo "No android directory"
        shell: bash

      - name: Set up JDK 17
        id: setup-java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Make android/gradlew executable if present
        run: |
          if [ -f "./android/gradlew" ]; then
            echo "Found android/gradlew -> making executable"
            chmod +x ./android/gradlew
            ls -l ./android/gradlew
          else
            echo "No android/gradlew found"
          fi
        shell: bash

      - name: Prepare Gradle (download if wrapper missing)
        id: prepare-gradle
        run: |
          if [ -f "./android/gradlew" ]; then
            echo "Using android/gradlew (project wrapper)."
            echo "GRADLE_CMD=./android/gradlew" >> $GITHUB_OUTPUT
          else
            echo "No gradlew found. Downloading Gradle ${GRADLE_VERSION}..."
            ZIP=gradle-${GRADLE_VERSION}-bin.zip
            curl -sSLO https://services.gradle.org/distributions/${ZIP}
            unzip -q ${ZIP}
            GR_HOME=$(pwd)/gradle-${GRADLE_VERSION}
            echo "Downloaded gradle to ${GR_HOME}"
            echo "GRADLE_CMD=${GR_HOME}/bin/gradle" >> $GITHUB_OUTPUT
            chmod +x ${GR_HOME}/bin/gradle
          fi
        shell: bash

      - name: Decode keystore (optional)
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "Decoding keystore to ./android/release.keystore"
            mkdir -p android
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/release.keystore
            ls -l android/release.keystore || true
          else
            echo "No KEYSTORE_BASE64 secret provided; skipping keystore decode."
          fi
        shell: bash

      - name: Build debug (inside android/)
        run: |
          echo "Using JAVA_HOME: $JAVA_HOME"
          GR_CMD="${{ steps.prepare-gradle.outputs.GRADLE_CMD }}"
          echo "Using gradle command: $GR_CMD"
          if [ -x "$GR_CMD" ]; then
            # if wrapper exists we need to cd into android before running wrapper
            if [ "$GR_CMD" = "./android/gradlew" ]; then
              cd android
              "$GR_CMD" assembleDebug --no-daemon
              cd ..
            else
              # downloaded gradle binary expects project-dir flag
              "$GR_CMD" -p android assembleDebug --no-daemon
            fi
          else
            echo "Gradle command not found or not executable: $GR_CMD"
            exit 1
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Build release (inside android/)
        run: |
          GR_CMD="${{ steps.prepare-gradle.outputs.GRADLE_CMD }}"
          echo "Using gradle command: $GR_CMD"
          if [ -x "$GR_CMD" ]; then
            if [ "$GR_CMD" = "./android/gradlew" ]; then
              cd android
              "$GR_CMD" assembleRelease --no-daemon || echo "assembleRelease returned non-zero; check logs"
              cd ..
            else
              "$GR_CMD" -p android assembleRelease --no-daemon || echo "assembleRelease returned non-zero; check logs"
            fi
          else
            echo "Gradle command not found or not executable: $GR_CMD"
            exit 1
          fi
        env:
          JAVA_HOME: ${{ steps.setup-java.outputs.java-home }}
        shell: bash

      - name: Show built APK locations
        run: |
          echo "=== Searching for APKs ==="
          find . -type f -name "*.apk" -print || echo "No APKs found."
        shell: bash

      - name: Upload build artifacts (any APKs found)
        uses: actions/upload-artifact@v4
        with:
          name: app-apks
          path: |
            **/build/outputs/**/*.apk
